/* =====================================================
   üöå KMITL Shuttle Tracking - Smooth Realtime Demo
   ===================================================== */

// ===== 0Ô∏è‚É£ Global Variables =====
let map;
let buses = [];
let busMarkers = {};      // ‡πÄ‡∏Å‡πá‡∏ö marker ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏ñ
let routeAlertStatus = {}; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≤‡∏¢‡∏£‡∏ñ
let stopAlertStatus = {};  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡πâ‡∏≤‡∏¢

// ===== 1Ô∏è‚É£ Initialize Map =====
function initMap() {
    map = L.map('map').setView([13.729, 100.776], 16);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);
}
initMap();

// ===== 2Ô∏è‚É£ Custom Icons =====
const busIcon = L.icon({ iconUrl: "/static/bus.png", iconSize: [32,32], iconAnchor: [16,16] });
const stopIcon = L.icon({ iconUrl: "/static/stop.png", iconSize: [28,28], iconAnchor: [14,14] });

// ===== 3Ô∏è‚É£ Fake Stops for Demo =====
const fakeStops = [
    { name: "‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏∂‡∏Å‡∏û‡∏£‡∏∞‡∏à‡∏≠‡∏°", lat: 13.7294, lng: 100.776, arrivalTime: 0 },
    { name: "‡πÇ‡∏£‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á", lat: 13.7299, lng: 100.778, arrivalTime: 5 },
    { name: "‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", lat: 13.7303, lng: 100.774, arrivalTime: 12 },
    { name: "‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏ß‡∏°", lat: 13.7287, lng: 100.773, arrivalTime: 20 }
];

// ===== 4Ô∏è‚É£ Load Stops on Map + Sidebar =====
function loadStops() {
    const stopList = document.getElementById("stopList");
    const allStops = document.getElementById("allStops");
    stopList.innerHTML = '';
    allStops.innerHTML = '';

    fakeStops.forEach(stop => {
        // Marker
        L.marker([stop.lat, stop.lng], { icon: stopIcon }).addTo(map).bindPopup(stop.name);

        // Sidebar lists
        [stopList, allStops].forEach(list => {
            const li = document.createElement("li");
            li.innerText = stop.name;
            li.onclick = () => map.setView([stop.lat, stop.lng], 18);
            list.appendChild(li);
        });
    });
}
loadStops();

// ===== 5Ô∏è‚É£ Render Route Stops in Panel =====
function renderRouteStops(routeLine) {
    const container = document.getElementById("routeStopsList");
    if (!container) return;
    container.innerHTML = '';

    const header = document.getElementById("busDetailHeader");
    if (header) header.innerText = `üöå ‡∏™‡∏≤‡∏¢ ${routeLine} (‡∏õ‡πâ‡∏≤‡∏¢‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)`;

    fakeStops.forEach(stop => {
        const stopId = `${routeLine}-${stop.name}`;

        const item = document.createElement('li');
        item.className = 'stop-item';

        const info = document.createElement('div');
        info.className = 'stop-info';
        info.innerText = stop.name;
        item.appendChild(info);

        const timeAlert = document.createElement('div');
        timeAlert.className = 'stop-time-alert';

        const timeDisplay = document.createElement('div');
        timeDisplay.className = 'stop-time';
        timeDisplay.innerText = stop.arrivalTime != null ? `${stop.arrivalTime} ‡∏ô‡∏≤‡∏ó‡∏µ` : '-- ‡∏ô‡∏≤‡∏ó‡∏µ';
        timeAlert.appendChild(timeDisplay);

        const alertBtn = document.createElement('button');
        const isActive = stopAlertStatus[stopId] || false;
        alertBtn.className = `alert-button ${isActive ? 'active' : ''}`;
        alertBtn.innerHTML = isActive ? 'üîî' : 'üîï';
        alertBtn.onclick = e => {
            e.stopPropagation();
            stopAlertStatus[stopId] = !isActive;
            renderRouteStops(routeLine);
            alert(stopAlertStatus[stopId] ? `‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏£‡∏ñ‡∏™‡∏≤‡∏¢ ${routeLine} ‡∏ñ‡∏∂‡∏á ${stop.name}` : `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ${stop.name}`);
        };

        timeAlert.appendChild(alertBtn);
        item.appendChild(timeAlert);

        item.onclick = () => map.setView([stop.lat, stop.lng], 18);
        container.appendChild(item);
    });
}

// ===== 6Ô∏è‚É£ Smooth Movement Function (‡∏ß‡∏ô‡∏£‡∏≠‡∏ö + ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡∏•‡∏∞‡∏à‡∏∏‡∏î) =====
function moveAlongRoute(busMarker, route, startIndex = 0, speed = 0.002) {
    let index = startIndex;

    function step() {
        if (route.length === 0) return;

        const [lat, lng] = route[index];
        const pos = busMarker.getLatLng();
        const latDiff = lat - pos.lat;
        const lngDiff = lng - pos.lng;

        if (Math.abs(latDiff) < 0.00001 && Math.abs(lngDiff) < 0.00001) {
            index++;
            if (index >= route.length) index = 0; // ‡∏ß‡∏ô‡∏£‡∏≠‡∏ö
        } else {
            busMarker.setLatLng([pos.lat + latDiff * speed, pos.lng + lngDiff * speed]);
        }

        requestAnimationFrame(step);
    }

    step();
}

// ===== 7Ô∏è‚É£ Load Bus Markers & Start Movement =====
function loadBuses() {
    buses.forEach((bus, i) => {
        const busId = bus.bus_id ?? bus.id;
        const lineName = bus.line ?? busId;

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ñ‡∏Ñ‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡πÉ‡∏ä‡πâ fakeStops)
        const route = fakeStops.map(s => [s.lat, s.lng]);

        if (!busMarkers[busId]) {
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏ñ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏±‡∏ô‡∏à‡∏≤‡∏Å index ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
            const startIndex = i % route.length;
            busMarkers[busId] = L.marker(route[startIndex], { icon: busIcon })
                .addTo(map)
                .bindPopup(`üöç ‡∏™‡∏≤‡∏¢ ${lineName}`);

            moveAlongRoute(busMarkers[busId], route, startIndex, 0.01); // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        }
    });
}

// ===== 8Ô∏è‚É£ Load Bus List Sidebar =====
function loadBusList() {
    const busList = document.getElementById("busList");
    if (!busList) return;
    busList.innerHTML = '';

    buses.forEach(bus => {
        const busId = bus.bus_id ?? bus.id;
        const lineName = bus.line ?? busId;

        const li = document.createElement("li");
        li.className = 'bus-list-item';

        const nameDiv = document.createElement('div');
        nameDiv.innerText = `üöç ‡∏™‡∏≤‡∏¢ ${lineName}`;
        nameDiv.style.flexGrow = '1';
        nameDiv.onclick = () => {
            showPanel(null, 'bus-detail');
            renderRouteStops(busId);
            const marker = busMarkers[busId];
            if (marker) { map.setView(marker.getLatLng(), 18); marker.openPopup(); }
        };

        const alertBtn = document.createElement('button');
        const isActive = routeAlertStatus[busId] || false;
        alertBtn.className = `alert-button ${isActive ? 'active' : ''}`;
        alertBtn.innerHTML = isActive ? 'üîî' : 'üîï';
        alertBtn.onclick = e => {
            e.stopPropagation();
            routeAlertStatus[busId] = !isActive;
            loadBusList();
        };

        li.appendChild(nameDiv);
        li.appendChild(alertBtn);
        busList.appendChild(li);
    });
}

// ===== 9Ô∏è‚É£ Sidebar Switching =====
function showPanel(event, panel) {
    document.querySelectorAll('.menu-item').forEach(el => el.classList.remove('active'));
    document.querySelectorAll('.panel-content').forEach(el => el.classList.remove('active'));

    const targetPanel = document.getElementById(panel + '-panel');
    if (targetPanel) targetPanel.classList.add('active');
    if (event) event.currentTarget.classList.add('active');

    setTimeout(() => map.invalidateSize(), 200);
}

// ===== üîü Filter Stops =====
function filterStops() {
    const filter = document.getElementById("searchBox").value.toLowerCase();
    document.querySelectorAll("#stopList li").forEach(li => {
        li.style.display = li.innerText.toLowerCase().includes(filter) ? "" : "none";
    });
}

// ===== 1Ô∏è‚É£1Ô∏è‚É£ WebSocket Realtime =====
const ws = new WebSocket("ws://127.0.0.1:8000/realtime");

ws.onopen = () => console.log("‚úÖ WebSocket connected");
ws.onmessage = event => {
    try {
        const data = JSON.parse(event.data);
        if (data.buses) {
            buses = data.buses;
            loadBuses();    // ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ñ
            loadBusList();  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ sidebar
        }
    } catch(e) {
        console.error("‚ùå WS parse error:", e);
    }
};
ws.onerror = err => console.error("‚ùå WS Error", err);
ws.onclose = e => console.warn("‚ö†Ô∏è WS closed", e);
